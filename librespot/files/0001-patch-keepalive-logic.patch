From a61f707c5c27babe726b065f01e09b4b3c8f722e Mon Sep 17 00:00:00 2001
From: wisp3rwind <17089248+wisp3rwind@users.noreply.github.com>
Date: Mon, 30 Sep 2024 22:34:11 +0200
Subject: [PATCH] session: rework keepalive logic to match other clients

---
 core/src/session.rs | 22 +++++++++++++++++++---
 1 file changed, 19 insertions(+), 3 deletions(-)

diff --git a/core/src/session.rs b/core/src/session.rs
index f934ed7b3..3594e37f5 100644
--- a/core/src/session.rs
+++ b/core/src/session.rs
@@ -375,6 +375,7 @@ impl Session {
 
         match packet_type {
             Some(Ping) => {
+                debug!("Received Ping");
                 let server_timestamp = BigEndian::read_u32(data.as_ref()) as i64;
                 let timestamp = SystemTime::now()
                     .duration_since(UNIX_EPOCH)
@@ -388,7 +389,23 @@ impl Session {
                 }
 
                 self.debug_info();
-                self.send_packet(Pong, vec![0, 0, 0, 0])
+                let session = self.weak();
+                tokio::spawn(async move {
+                    tokio::time::sleep(tokio::time::Duration::from_secs(60)).await;
+                    if let Some(session) = session.try_upgrade() {
+                        debug!("Sending Pong");
+                        let _ = session.send_packet(Pong, vec![0, 0, 0, 0]);
+                    }
+
+                    // TODO: Wait for PongAck. Then, wait for next ping and use
+                    // both events in the session timeout detection.
+                });
+
+                Ok(())
+            }
+            Some(PongAck) => {
+                debug!("Received PongAck");
+                Ok(())
             }
             Some(CountryCode) => {
                 let country = String::from_utf8(data.as_ref().to_owned())?;
@@ -439,8 +456,7 @@ impl Session {
                 self.0.data.write().user_data.attributes = user_attributes;
                 Ok(())
             }
-            Some(PongAck)
-            | Some(SecretBlock)
+            Some(SecretBlock)
             | Some(LegacyWelcome)
             | Some(UnknownDataAllZeros)
             | Some(LicenseVersion) => Ok(()),
